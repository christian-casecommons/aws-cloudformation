#jinja2: lstrip_blocks: True
---
AWSTemplateFormatVersion: "2010-09-09"

Description: Application Load Balancer Stack

Metadata:
  Stack::Transform:
    DefaultDependencyMappings:
      - LoadBalancer

Parameters:
  Name:
    Type: String
    Description: Name of load balancer
  AllowedCidr:
    Type: String
    Description: CIDR range allowed access to Load Balancer Listener(s)
    Default: NONE
  AzCount:
    Type: Number
    Description: Number of AZs to deploy
    Default: 2
    AllowedValues:
      - 2
      - 3
  Certificate:
    Type: String
    Description: CloudFormation export that defines certificate ARN
    Default: ""
  CloudwatchAlarms:
    Type: String
    Description: ARN of SNS topic for CloudWatch Alarms
    Default: NONE
  ConnectionDrainTimeout:
    Type: Number
    Description: Maximum time to drain connections
    Default: 300
  ConnectionIdleTimeout:
    Type: Number
    Description: Connection idle timeout in seconds
    Default: 30
  CustomSecurityGroup:
    Type: String
    Description: Custom Security Group to attach to Load Balancer
    Default: NONE
  DeleteProtectionEnabled:
    Type: String
    Description: Enables or disables delete protection
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  DnsHostname:
    Type: String
    Description: Hostname portion of FQDN of load balancer
    Default: ""
  DnsDomain:
    Type: String
    Description: Domain portion of FQDN of load balancer
    Default: ""
  HttpPort:
    Type: Number
    Description: Load balancer HTTP listener port
    Default: 0
  HttpsPort:
    Type: Number
    Description: Load balancer HTTPS listener port
    Default: 0
  LoadBalancerMetrics:
    Type: String
    Description: Set to true to create load balancer metrics
    Default: "False"
    AllowedValues:
      - "True"
      - "true"
      - "False"
      - "false"
  Scheme:
    Type: String
    Description: Load balancer scheme
    AllowedValues:
      - internet-facing
      - internal
  Subnets:
    Type: String
    Description: Subnet the load balancer instances will be deployed to
    AllowedValues:
      - Medium
      - High
      - Management
      - Public
  TargetGroupPort:
    Type: Number
    Description: Default target group backend port
    Default: 0
  TargetGroupProtocol:
    Type: String
    Description: Default target group backend protocol
    Default: HTTP
    AllowedValues:
      - HTTP
      - HTTPS
  TargetGroupHealthCheck:
    Type: String
    Description: Health check path of default target group
    Default: /
  TargetSecurityGroup:
    Type: String
    Description: Default target security group
    Default: NONE
  VpcName:
    Type: String
    Description: CloudFormation export prefix that defines the target VPC
    Default: Default
  TargetGroupHealthCheckStatusCode:
    Type: String
    Description: Status code(s) permitted under healthcheck
    Default: "200"

Conditions:
  CloudwatchAlarmsTopicExists:
    Fn::Not:
      - Fn::Equals:
        - Ref: CloudwatchAlarms
        - NONE
  AllowHttp:
    Fn::And:
      - Condition: HttpEnabled
      - Fn::Not:
        - Fn::Equals:
          - Ref: AllowedCidr
          - NONE
  AllowHttps:
    Fn::And:
      - Condition: HttpsEnabled
      - Fn::Not:
        - Fn::Equals:
          - Ref: AllowedCidr
          - NONE
  AllowHttpAndHttps:
    Fn::And:
      - Condition: AllowHttp
      - Condition: AllowHttps
  HttpEnabled:
    Fn::Not:
      - Fn::Equals:
        - Ref: HttpPort
        - 0
  HttpsEnabled:
    Fn::Not:
      - Fn::Equals:
        - Ref: HttpsPort
        - 0
  LoadBalancerMetricsEnabled:
    Fn::Or:
      - Fn::Equals:
        - Ref: LoadBalancerMetrics
        - "True"
      - Fn::Equals:
        - Ref: LoadBalancerMetrics
        - "true"
  ThreeAzCondition:
    Fn::Equals:
      - Ref: AzCount
      - 3
  CustomSecurityGroupCondition:
    Fn::Not:
      - Fn::Equals:
        - Ref: CustomSecurityGroup
        - NONE
  DnsExists:
    Fn::Not:
      - Fn::Equals:
        - Ref: DnsDomain
        - ""
  DnsExists:
    Fn::Not:
      - Fn::Equals:
        - Ref: DnsDomain
        - ""
  TargetGroupEnabled:
    Fn::Not:
      - Fn::Equals:
        - Ref: TargetGroupPort
        - 0
  TargetSecurityGroupEnabled:
    Fn::Not:
      - Fn::Equals:
        - Ref: TargetSecurityGroup
        - NONE

Resources:
  DnsRecord:
    Type: AWS::Route53::RecordSet
    Condition: DnsExists
    Properties:
      Name:
        Fn::Sub: ${DnsHostname}.${DnsDomain}
      TTL: 300
      HostedZoneName:
        Fn::Sub: ${DnsDomain}.
      Type: CNAME
      Comment:
        Fn::Sub: ${AWS::StackName} ${Name} DNS Record
      ResourceRecords:
        - Fn::Sub: ${LoadBalancer.DNSName}
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme:
        Ref: Scheme
      SecurityGroups:
        Fn::If:
          - CustomSecurityGroupCondition
          - - Ref: CustomSecurityGroup
            - Ref: SecurityGroup
          - - Ref: SecurityGroup
      Subnets:
        Fn::If:
          - ThreeAzCondition
          - - Fn::ImportValue:
                Fn::Sub: ${VpcName}${Subnets}SubnetA
            - Fn::ImportValue:
                Fn::Sub: ${VpcName}${Subnets}SubnetB
            - Fn::ImportValue:
                Fn::Sub: ${VpcName}${Subnets}SubnetC
          - - Fn::ImportValue:
                Fn::Sub: ${VpcName}${Subnets}SubnetA
            - Fn::ImportValue:
                Fn::Sub: ${VpcName}${Subnets}SubnetB
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value:
            Ref: DeleteProtectionEnabled
        - Key: idle_timeout.timeout_seconds
          Value:
            Ref: ConnectionIdleTimeout
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-${Name}

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName} ${Name} Http Listener Security Group
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcName}VpcId
      SecurityGroupEgress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 192.0.2.0/32
      SecurityGroupIngress:
        Fn::If:
          - AllowHttpAndHttps
          - - IpProtocol: tcp
              FromPort:
                Ref: HttpPort
              ToPort:
                Ref: HttpPort
              CidrIp:
                Ref: AllowedCidr
            - IpProtocol: tcp
              FromPort:
                Ref: HttpsPort
              ToPort:
                Ref: HttpsPort
              CidrIp:
                Ref: AllowedCidr
          - Fn::If:
            - AllowHttp
            - - IpProtocol: tcp
                FromPort:
                  Ref: HttpPort
                ToPort:
                  Ref: HttpPort
                CidrIp:
                  Ref: AllowedCidr
            - Fn::If:
              - AllowHttps
              - - IpProtocol: tcp
                  FromPort:
                    Ref: HttpsPort
                  ToPort:
                    Ref: HttpsPort
                  CidrIp:
                    Ref: AllowedCidr
              - Ref: AWS::NoValue
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${AWS::StackName}-${Name}-sg

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HttpEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port:
        Ref: HttpPort
      Protocol: HTTP
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HttpsEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port:
        Ref: HttpsPort
      Protocol: HTTPS
      Certificates:
        - CertificateArn:
            Ref: Certificate
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: TargetGroupEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${VpcName}VpcId
      Protocol:
        Ref: TargetGroupProtocol
      Port:
        Ref: TargetGroupPort
      HealthCheckPath:
        Ref: TargetGroupHealthCheck
      Matcher:
        HttpCode:
          Ref: TargetGroupHealthCheckStatusCode
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value:
            Ref: ConnectionDrainTimeout
  TargetGroupTargetResponseTime:
    Type: AWS::CloudWatch::Alarm
    Condition: LoadBalancerMetricsEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      AlarmDescription: alb latency check
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 2
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::Sub: ${LoadBalancer.LoadBalancerFullName}
        - Name: TargetGroup
          Value:
            Fn::Sub: ${TargetGroup.TargetGroupFullName}
  TargetGroupUnHealthyHostCount:
    Type: "AWS::CloudWatch::Alarm"
    Condition: LoadBalancerMetricsEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      AlarmDescription: alb unhealthy host check
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 10
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::Sub: ${LoadBalancer.LoadBalancerFullName}
        - Name: TargetGroup
          Value:
            Fn::Sub: ${TargetGroup.TargetGroupFullName}
  TargetGroupHTTPCodeELB5XX:
    Type: "AWS::CloudWatch::Alarm"
    Condition: LoadBalancerMetricsEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      AlarmDescription: alb HTTP 5XX code check
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::Sub: ${LoadBalancer.LoadBalancerFullName}
        - Name: TargetGroup
          Value:
            Fn::Sub: ${TargetGroup.TargetGroupFullName}
  TargetGroupRejectedConnectionCount:
    Type: "AWS::CloudWatch::Alarm"
    Condition: LoadBalancerMetricsEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      AlarmDescription: alb rejected connection count check
      MetricName: RejectedConnectionCount
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 10
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::Sub: ${LoadBalancer.LoadBalancerFullName}
        - Name: TargetGroup
          Value:
            Fn::Sub: ${TargetGroup.TargetGroupFullName}

  ToTargetGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: TargetSecurityGroupEnabled
    Properties:
      IpProtocol: tcp
      FromPort:
        Ref: TargetGroupPort
      ToPort:
        Ref: TargetGroupPort
      GroupId:
        Ref: TargetSecurityGroup
      SourceSecurityGroupId:
        Ref: SecurityGroup
  ToTargetGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: TargetSecurityGroupEnabled
    Properties:
      IpProtocol: tcp
      FromPort:
        Ref: TargetGroupPort
      ToPort:
        Ref: TargetGroupPort
      GroupId:
        Ref: SecurityGroup
      DestinationSecurityGroupId:
        Ref: TargetSecurityGroup
  LoadBalancerTargetResponseTime:
    Type: AWS::CloudWatch::Alarm
    Condition: LoadBalancerMetricsEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      AlarmDescription: alb latency check
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 5
      Threshold: 2
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::Sub: ${LoadBalancer.LoadBalancerFullName}
  LoadBalancerUnHealthyHostCount:
    Type: "AWS::CloudWatch::Alarm"
    Condition: LoadBalancerMetricsEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      AlarmDescription: alb unhealthy host check
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 10
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::Sub: ${LoadBalancer.LoadBalancerFullName}
  LoadBalancerHTTPCodeELB5XX:
    Type: "AWS::CloudWatch::Alarm"
    Condition: LoadBalancerMetricsEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      AlarmDescription: alb HTTP 5XX code check
      MetricName: HTTPCode_ELB_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 5
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::Sub: ${LoadBalancer.LoadBalancerFullName}
  LoadBalancerRejectedConnectionCount:
    Type: "AWS::CloudWatch::Alarm"
    Condition: LoadBalancerMetricsEnabled
    DependsOn:
      - LoadBalancer
    Properties:
      AlarmDescription: alb rejected connection count check
      MetricName: RejectedConnectionCount
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 10
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        Fn::If:
        - CloudwatchAlarmsTopicExists
        - Ref: CloudwatchAlarms
        - Ref: AWS::NoValue
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::Sub: ${LoadBalancer.LoadBalancerFullName}

Outputs:
  DnsRecord:
    Description: Load Balancer DNS Record
    Value:
      Ref: DnsRecord
  LoadBalancer:
    Description: Load Balancer Resource
    Value:
      Ref: LoadBalancer
  HttpListener:
    Description: HTTP Listener Resource
    Condition: HttpEnabled
    Value:
      Ref: HttpListener
  HttpsListener:
    Description: HTTPS Listener Resource
    Condition: HttpsEnabled
    Value:
      Ref: HttpsListener
  TargetGroup:
    Description: Default Target Group Resource
    Value:
      Ref: TargetGroup
  SecurityGroup:
    Description: Load Balancer Security Group
    Value:
      Ref: SecurityGroup